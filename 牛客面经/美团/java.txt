Java基础开始，集合类、多线程、反射机制、JVM 全是自由发挥，能讲多深就讲多深的那种，中间会穿插的提出问题或场景


==============

==============

==============

==============

==============
ConcurrentHashMap和HashTable的区别：
Hashtable的任何操作都会把整个表锁住，是阻塞的。好处是总能获取最实时的更新，
比如说线程A调用putAll写入大量数据，期间线程B调用get，线程B就会被阻塞，
直到线程A完成putAll，因此线程B肯定能获取到线程A写入的完整数据。

坏处是所有调用都要排队，效率较低。

ConcurrentHashMap 是设计为非阻塞的。在更新时会局部锁住某部分数据，但不会把整个表都锁住。
同步读取操作则是完全非阻塞的。好处是在保证合理的同步前提下，效率很高。

坏处是严格来说读取操作不能保证反映最近的更新。例如线程A调用putAll写入大量数据，
期间线程B调用get，则只能get到目前为止已经顺利插入的部分数据。
应该根据具体的应用场景选择合适的HashMap。

==============
LinkedList以及ArrayList的迭代效率比较

结论：ArrayList使用最普通的for循环遍历比较快，LinkedList使用foreach循环比较快。

==============
总结：
(01) LinkedList 实际上是通过双向链表去实现的。
它包含一个非常重要的内部类：Entry。Entry是双向链表节点所对应的数据结构，它包括的属性有：当前节点所包含的值，上一个节点，下一个节点。
(02) 从LinkedList的实现方式中可以发现，它不存在LinkedList容量不足的问题。
(03) LinkedList的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中。
(04) LinkedList实现java.io.Serializable。当写入到输出流时，先写入“容量”，再依次写入“每一个节点保护的值”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。
(05) 由于LinkedList实现了Deque，而Deque接口定义了在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。


==============
ArrayList，Vector主要区别为以下几点：

Vector是线程安全的，源码中有很多的synchronized可以看出，而ArrayList不是。导致Vector效率无法和ArrayList相比；
ArrayList和Vector都采用线性连续存储空间，当存储空间不足的时候，ArrayList默认增加为原来的50%，Vector默认增加为原来的一倍；
Vector可以设置capacityIncrement，而ArrayList不可以，从字面理解就是capacity容量，Increment增加，容量增长的参数。

==============
